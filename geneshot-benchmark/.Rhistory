params$slice_radius=0.5
draw.circle(0, 0, params$slice_radius, col="black")
plot(1, type="n", axes=F, xlab="", ylab="", xlim = c(-1, 1), ylim = c(-1, 1))
draw.circle(0, 0, params$slice_radius, col="black")
rect(-1, -1, 1, 0.3, col="white")
rect(-1, -1, 1, 0.3, col="white", border="white")
draw.circle(0, 0, params$slice_radius, col="black")
rect(-1, -1, 1, 0.3, col="white", border="white")
# Empty plot
plot(1, type="n", axes=F, xlab="", ylab="", xlim = c(-1, 1), ylim = c(-1, 1))
# Draw circle
draw.circle(0, 0, params$slice_radius, col="black")
# Slice
rect(-1, -1, 1, 0.3, col="white", border="white")
params$slice_cut
source('~/Documents/Meetings/2016_30_11-BD2K_allhands_meeting/demo images/icon/lib.R', echo=TRUE)
plot(1, type="n", axes=F, xlab="", ylab="", xlim = c(-1, 1), ylim = c(-1, 1))
draw.circle(0, 0, params$slice_radius, col="black")
rect(-1, -1, 1, params$slice_radius/params$slice_cut, col="white", border="white")
params$slice_radius/params$slice_cut
params$slice_radius
# Empty plot
plot(1, type="n", axes=F, xlab="", ylab="", xlim = c(-1, 1), ylim = c(-1, 1))
# Draw circle
draw.circle(0, 0, params$slice_radius, col="black")
# Slice
rect(-1, -1, 1, params$slice_radius*params$slice_cut, col="white", border="white")
# Empty plot
plot(1, type="n", axes=F, xlab="", ylab="", xlim = c(-1, 1), ylim = c(-1, 1))
# Draw circle
draw.circle(0, 0, params$slice_radius, col="black")
# Slice
rect(-1, -1, 1, 0.75, col="white", border="white")
rect(-1, -1, 1, params$slice_radius*params$slice_cut, col="white", border="white")
# Empty plot
plot(1, type="n", axes=F, xlab="", ylab="", xlim = c(-1, 1), ylim = c(-1, 1))
# Draw circle
draw.circle(0, 0, params$slice_radius, col="black")
# Slice
rect(-1, -1, 1, params$slice_radius*params$slice_cut, col="white", border="white")
require(png)
install.packages('png')
# Empty plot
plot(1, type="n", axes=F, xlab="", ylab="", xlim = c(-1, 1), ylim = c(-1, 1))
# Draw circle
draw.circle(0, 0, params$slice_radius, col="black")
# Slice
rect(-1, -1, 1, params$slice_radius*params$slice_cut, col="white", border="white")
infile <- '/Users/denis/Downloads/GSE30017_series_matrix.txt'
rawcount_df <- read.table(infile)
rawcount_df <- read.table(infile, fill=TRUE)
head(rawcount_df)
rawcount_df <- read.table(infile, fill=TRUE, sep='\t')
head(rawcount_df)
head(rawcount_df, 50)
head(rawcount_df, 500)
rawcount_df <- read.table(infile, fill=TRUE, sep='\t')
head(rawcount_df, 500)
head(rawcount_df, 50)
head(rawcount_df, 5)
le(infile, fill=TRUE, sep='\t')
rownames(rawcount_df) <- rawcount_df[,1]
rawcount_df[,1] <- NULL
head(rawcount_df, 5)
rawcount_df <- read.table(infile, fill=TRUE, sep='\t')
rownames(rawcount_df) <- rawcount_df[,1]
rawcount_df[,1] <- NULL
head(rawcount_df, 5)
rawcount_df <- read.table(infile, fill=TRUE, sep='\t', header=TRUE)
rownames(rawcount_df) <- rawcount_df[,1]
rawcount_df[,1] <- NULL
head(rawcount_df, 5)
meanCounts <- apply(rawcount_df, 1, mean)
plot(density(meanCounts))
summary(meanCounts)
max(rawcount_df)
a <- as.numeric(rawcount_df)
a <- as.matrix(rawcount_df)
a <- as.numeric(as.matrix(rawcount_df))
a
b <- sort(a, decreasing=TRUE)
b[1:5]
b[1:50]
infiles <- c('../../f2-normalized_expression_data.dir/podocyte_cell_line-vst.txt',
'../../f2-normalized_expression_data.dir/primary_podocyte-vst.txt',
'../../rawdata/hiv_sample_annotation.txt')
# Get dataframes
cellLineExpressionData <- read.table(infiles[1])
primaryExpressionData <- read.table(infiles[2])
sampleAnnotationDataframe <- read.table(infiles[3])
# Get annotation data
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')]
primaryAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'primary_podocyte', c('sample_name', 'cell_type', 'treatment', 'patient_group', 'patient')]
infiles <- c('../../f2-normalized_expression_data.dir/podocyte_cell_line-vst.txt',
'../../f2-normalized_expression_data.dir/primary_podocyte-vst.txt',
'../../rawdata/hiv_sample_annotation.txt')
# Get dataframes
cellLineExpressionData <- read.table(infiles[1])
getwd()
# Load libraries
source('/Users/denis/Documents/Projects/scripts/Support.R')
# Get input files
infiles <- c('/Users/denis/Documents/Projects/hiv-analysis/hiv-signature-analysis/f2-normalized_expression_data.dir/podocyte_cell_line-vst.tx',
'/Users/denis/Documents/Projects/hiv-analysis/hiv-signature-analysis/f2-normalized_expression_data.dir/primary_podocyte-vst.txt',
'/Users/denis/Documents/Projects/hiv-analysis/hiv-signature-analysis/rawdata/hiv_sample_annotation.txt')
# Get dataframes
cellLineExpressionData <- read.table(infiles[1])
primaryExpressionData <- read.table(infiles[2])
sampleAnnotationDataframe <- read.table(infiles[3])
# Get annotation data
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')]
primaryAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'primary_podocyte', c('sample_name', 'cell_type', 'treatment', 'patient_group', 'patient')]
source('/Users/denis/Documents/Projects/scripts/Support.R')
# Get input files
infiles <- c('/Users/denis/Documents/Projects/hiv-analysis/hiv-signature-analysis/f2-normalized_expression_data.dir/podocyte_cell_line-vst.txt',
'/Users/denis/Documents/Projects/hiv-analysis/hiv-signature-analysis/f2-normalized_expression_data.dir/primary_podocyte-vst.txt',
'/Users/denis/Documents/Projects/hiv-analysis/hiv-signature-analysis/rawdata/hiv_sample_annotation.txt')
# Get dataframes
cellLineExpressionData <- read.table(infiles[1])
primaryExpressionData <- read.table(infiles[2])
sampleAnnotationDataframe <- read.table(infiles[3])
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')]
primaryAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'primary_podocyte', c('sample_name', 'cell_type', 'treatment', 'patient_group', 'patient')]
primaryAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'primary_podocyte', c('sample_name', 'cell_type', 'treatment', 'patient_group', 'patient')]
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')]
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line',]#c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')]
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line',]
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line',] #, c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')
c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')\
c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('sample_name')] #, c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('sample_name','cell_type')] #, c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')
head(cellLineAnnotationDataframe)
head(sampleAnnotationDataframe)
cellLineExpressionData <- read.table(infiles[1], header=TRUE)
primaryExpressionData <- read.table(infiles[2], header=TRUE)
sampleAnnotationDataframe <- read.table(infiles[3], header=TRUE)
head(cellLineExpressionData)
?read.table
cellLineExpressionData <- read.table(infiles[1], header=TRUE, row.names='gene_symbol')
head(cellLineExpressionData)
cellLineExpressionData <- read.table(infiles[1], header=TRUE, row.names='gene_symbol')
primaryExpressionData <- read.table(infiles[2], header=TRUE, row.names='gene_symbol')
sampleAnnotationDataframe <- read.table(infiles[3], header=TRUE, row.names='sample_name')
head(sampleAnnotationDataframe)
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('cell_type','treatment','timepoint','batch')] #, c('sample_name', 'cell_type', 'treatment', 'timepoint', 'batch')
cellLineAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'cell_line', c('cell_type','treatment','timepoint','batch')]
primaryAnnotationDataframe <- sampleAnnotationDataframe[sampleAnnotationDataframe$cell_type == 'primary_podocyte', c('cell_type','treatment','patient_group','patient')]
print('hello')
print('hello')
install.packages("genalg")
install.packages(c("animation", "assertthat", "backports", "boot", "corpcor", "curl", "DBI", "devtools", "dplyr", "flexmix", "foreign", "gdata", "GGally", "Hmisc", "htmltools", "irlba", "jsonlite", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "mclust", "memoise", "pbdZMQ", "plotly", "plotrix", "pracma", "purrr", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "rentrez", "repr", "rmarkdown", "RMySQL", "rpart", "RSQLite", "shiny", "sourcetools", "SparseM", "stringi", "survival", "tibble", "tidyr", "VIM", "viridis", "viridisLite", "XML", "zoo"))
library(genalg)
library(ggplot2)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "unions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
weightlimit <- 20
weightlimit <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
cat(summary.rbga(GAmodel))
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
cat(summary.rbga(GAmodel))
library(genalg)
library(ggplot2)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "unions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
weightlimit <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
cat(summary.rbga(GAmodel))
cat(genalg::summary.rbga(GAmodel))
solution = c(1, 1, 1, 1, 1, 0, 1)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
animate_plot <- function(x) {
for (i in seq(1, iter)) {
temp <- data.frame(Generation = c(seq(1, i), seq(1, i)), Variable = c(rep("mean",
i), rep("best", i)), Survivalpoints = c(-GAmodel$mean[1:i], -GAmodel$best[1:i]))
pl <- ggplot(temp, aes(x = Generation, y = Survivalpoints, group = Variable,
colour = Variable)) + geom_line() + scale_x_continuous(limits = c(0,
iter)) + scale_y_continuous(limits = c(0, 110)) + geom_hline(y = max(temp$Survivalpoints),
lty = 2) + annotate("text", x = 1, y = max(temp$Survivalpoints) +
2, hjust = 0, size = 3, color = "black", label = paste("Best solution:",
max(temp$Survivalpoints))) + scale_colour_brewer(palette = "Set1") +
opts(title = "Evolution Knapsack optimization model")
print(pl)
}
}
library(animation)
saveMovie(animate_plot(), interval = 0.1, outdir = getwd())
install.packages("animation")
library(animation)
saveMovie(animate_plot(), interval = 0.1, outdir = getwd())
cat(summary(GAmodel))
install.packages("xml2")
install.packages("httpRequest")
matrix(rexp(200), 10)
a = matrix(rexp(200), 10)
require(gplots)
heatmap(a)
heatmap(a, col=colorRampPalette(c('red3','white','navyblue')))
colorRampPalette
colorRampPalette()
colorRampPalette(c('red3','white','navyblue'))
heatmap(a, col=colorRampPalette(c('red','white','blue')))
heatmap(a, col=colorRampPalette(c('red','white','blue'))(200))
a = matrix(rexp(2000), 10)
heatmap(a, col=colorRampPalette(c('red','white','blue'))(200))
heatmap(a, col=colorRampPalette(c('red3','white','navyblue'))(200))
a = matrix(rnorm(2000), 10)
heatmap(a, col=colorRampPalette(c('red3','white','navyblue'))(200))
heatmap(apply(a, 1, zscore), col=colorRampPalette(c('red3','white','navyblue'))(200))
heatmap(apply(a, 1, function(x) (x-mean(x))/sd(x)), col=colorRampPalette(c('red3','white','navyblue'))(200))
install.packages("venneuler")
require(venneuler)
#here I replicate your data
#because it's repeatable, you can use `rep` function to generate it
c1 <- rep(c(0,1),each=8)
c2 <- rep(c(0,1),each=4,times=2)
c3 <- rep(c(0,1),each=2,times=4)
c4 <- rep(c(0,1),times=8)
#put your data into matrix
m <- as.matrix(data.frame(C1=c1,C2=c2,C3=c3,C4=c4))
#plot it
v = venneuler(m)
plot(v)
install.packages("svglite")
system('echo $PATH')
setwd('/Users/denis/Documents/Projects/analysis-pipelines/geneshot-benchmark')
correlation_dataframe <- read.table('~/Downloads/correlation.tsv')
correlation_dataframe[1:5,1:5]
colnames(correlation_dataframe) <- rownames(correlation_dataframe)
correlation_dataframe[1:5,1:5]
correlation_dataframe[1:5,1:5]
colnames(correlation_dataframe) <- rownames(correlation_dataframe)
correlation_dataframe[1:5,1:5]
rownames(correlation_dataframe) <- correlation_dataframe[,1]
correlation_dataframe[1:5,1:5]
correlation_dataframe[,1] <- NULL
correlation_dataframe[1:5,1:5]
colnames(correlation_dataframe) <- rownames(correlation_dataframe)
correlation_dataframe[1:5,1:5]
correlation_matrix[1:5,1:5]
correlation_matrix <- as.matrix(correlation_dataframe)
correlation_matrix[1:5,1:5]
correlation_matrix[correlation_matrix > 0.99] = NA # remove self-self interaction
correlation_matrix[1:5,1:5]
gmt = readLines('libraries.dir/ARCHS4_Kinases_Coexp.txt')
gmt
genelists = list()                        #each element in list-> gene
for(ll in gmt){
sp = unlist(strsplit(ll, "\t"))         #split strings of each line (into tabbed words)
genesetname = sp[1]                     #1st string is the current geneset's name
v = c()                                 #create an empty vector v, ends up being all of the genes in this gene set
for(i in 3:length(sp)){                 #actual gene symbol starts at 3rd string(name of set, empty space for description, 1st gene)
sp1 = unlist(strsplit(sp[i], ","))    #can read commas in a geneset names
v = c(v, sp1[1])                      #dismiss other numbers only save gene symbols to v
}
ig = intersect(genes, v)                #unique genes of ref gmt & tissue corr expression matrix
if(length(ig) > 1){                     #need at least 2 genes @ each geneset
genelists[[length(genelists)+1]] = ig #holds phenotypes & genes in list format, each set is a vector of its genes
names(genelists)[length(genelists)] = gsub("_$", "", genesetname) #throwout underscore in genesets
}
}
sgenes = rev(sort(table(unlist(genelists))))
sgenes = names(sgenes)[sgenes > 4]
reversegmt = list()
for(i in 1:length(genelists)){
lname = names(genelists)[i]
for(gene in genelists[[i]]){
reversegmt[[gene]] = c(reversegmt[[gene]], lname)
}
}
gmt = readLines('libraries.dir/ARCHS4_Kinases_Coexp.txt')
genelists = list()                        #each element in list-> gene
for(ll in gmt){
sp = unlist(strsplit(ll, "\t"))         #split strings of each line (into tabbed words)
genesetname = sp[1]                     #1st string is the current geneset's name
v = c()                                 #create an empty vector v, ends up being all of the genes in this gene set
for(i in 3:length(sp)){                 #actual gene symbol starts at 3rd string(name of set, empty space for description, 1st gene)
sp1 = unlist(strsplit(sp[i], ","))    #can read commas in a geneset names
v = c(v, sp1[1])                      #dismiss other numbers only save gene symbols to v
}
ig = intersect(genes, v)                #unique genes of ref gmt & tissue corr expression matrix
if(length(ig) > 1){                     #need at least 2 genes @ each geneset
genelists[[length(genelists)+1]] = ig #holds phenotypes & genes in list format, each set is a vector of its genes
names(genelists)[length(genelists)] = gsub("_$", "", genesetname) #throwout underscore in genesets
}
}
genes = rownames(correlation_matrix)      #expt=expression matrix, cor.score
# Read GMT
gmt = readLines('libraries.dir/ARCHS4_Kinases_Coexp.txt')
genelists = list()                        #each element in list-> gene
for(ll in gmt){
sp = unlist(strsplit(ll, "\t"))         #split strings of each line (into tabbed words)
genesetname = sp[1]                     #1st string is the current geneset's name
v = c()                                 #create an empty vector v, ends up being all of the genes in this gene set
for(i in 3:length(sp)){                 #actual gene symbol starts at 3rd string(name of set, empty space for description, 1st gene)
sp1 = unlist(strsplit(sp[i], ","))    #can read commas in a geneset names
v = c(v, sp1[1])                      #dismiss other numbers only save gene symbols to v
}
ig = intersect(genes, v)                #unique genes of ref gmt & tissue corr expression matrix
if(length(ig) > 1){                     #need at least 2 genes @ each geneset
genelists[[length(genelists)+1]] = ig #holds phenotypes & genes in list format, each set is a vector of its genes
names(genelists)[length(genelists)] = gsub("_$", "", genesetname) #throwout underscore in genesets
}
}
sgenes = rev(sort(table(unlist(genelists))))
sgenes = names(sgenes)[sgenes > 4]
sgenes
reversegmt = list()
for(i in 1:length(genelists)){
lname = names(genelists)[i]
for(gene in genelists[[i]]){
reversegmt[[gene]] = c(reversegmt[[gene]], lname)
}
}
correlation_matrix[correlation_matrix > 0.99] = NA # remove self-self interaction
mean_matrix = matrix(0, nrow(correlation_matrix), length(genelists))
rownames(mean_matrix) = rownames(correlation_matrix)
colnames(mean_matrix) = names(genelists)
for(p in names(genelists)){
mean_matrix[, p] = rowMeans(correlation_matrix[,genelists[[p]]], na.rm=T)
}
mean_matrix[1:5,1:5]
write.table(mean_matrix, '~/Desktop/matrix_R.txt')
write.table(mean_matrix, '~/Desktop/matrix_R.txt', sep='\t')
scale_vector <- function(x, start, end) (x - min(x)) / max(x - min(x)) * (end - start) + start
aucgeneset = c() #gene function AUC vector
aucgeneset = c() #gene function AUC vector
for (current_set in colnames(mean_matrix)) {
setprob = mean_matrix[,current_set]
v1 = rownames(mean_matrix) %in% genelists[[current_set]]
oo = rev(order(setprob))
ov1 = v1[oo]
cumulative = cumsum(ov1)
scaled_y = scale_vector(cumulative, 0, 1)
scaled_x= scale_vector(1:length(cumulative), 0, 1)
aucgeneset[current_set] = trapz(scaled_x, scaled_y)
}
library("pracma")
install.packages("pracma")
library("pracma")
aucgeneset = c() #gene function AUC vector
aucgeneset = c() #gene function AUC vector
for (current_set in colnames(mean_matrix)) {
setprob = mean_matrix[,current_set]
v1 = rownames(mean_matrix) %in% genelists[[current_set]]
oo = rev(order(setprob))
ov1 = v1[oo]
cumulative = cumsum(ov1)
scaled_y = scale_vector(cumulative, 0, 1)
scaled_x= scale_vector(1:length(cumulative), 0, 1)
aucgeneset[current_set] = trapz(scaled_x, scaled_y)
}
aucgeneset
write.table(aucgeneset, '~/Desktop/auc_R.txt', sep='\t')
correlation_dataframe <- read.table('~/Downloads/fraction.txt')
correlation_dataframe <- read.table('~/Desktop/fraction.txt')
correlation_dataframe[1:5,1:5]
correlation_dataframe[1,] <- NULL
correlation_dataframe[1:5,1:5]
correlation_dataframe <- correlation_dataframe[-1,]
correlation_dataframe[1:5,1:5]
rownames(correlation_dataframe) <- correlation_dataframe[,1]
correlation_dataframe[,1] <- NULL
correlation_dataframe[1:5,1:5]
colnames(correlation_dataframe) <- rownames(correlation_dataframe)
correlation_dataframe[1:5,1:5]
genes = rownames(correlation_matrix)      #expt=expression matrix, cor.score
gmt = readLines('libraries.dir/ARCHS4_Kinases_Coexp.txt')
#####
# Read GMT
gmt = readLines('libraries.dir/ARCHS4_Kinases_Coexp.txt')
genelists = list()                        #each element in list-> gene
for(ll in gmt){
sp = unlist(strsplit(ll, "\t"))         #split strings of each line (into tabbed words)
genesetname = sp[1]                     #1st string is the current geneset's name
v = c()                                 #create an empty vector v, ends up being all of the genes in this gene set
for(i in 3:length(sp)){                 #actual gene symbol starts at 3rd string(name of set, empty space for description, 1st gene)
sp1 = unlist(strsplit(sp[i], ","))    #can read commas in a geneset names
v = c(v, sp1[1])                      #dismiss other numbers only save gene symbols to v
}
ig = intersect(genes, v)                #unique genes of ref gmt & tissue corr expression matrix
if(length(ig) > 1){                     #need at least 2 genes @ each geneset
genelists[[length(genelists)+1]] = ig #holds phenotypes & genes in list format, each set is a vector of its genes
names(genelists)[length(genelists)] = gsub("_$", "", genesetname) #throwout underscore in genesets
}
}
sgenes = rev(sort(table(unlist(genelists))))
sgenes = names(sgenes)[sgenes > 4]
reversegmt = list()
for(i in 1:length(genelists)){
lname = names(genelists)[i]
for(gene in genelists[[i]]){
reversegmt[[gene]] = c(reversegmt[[gene]], lname)
}
}
#####
#STEP II. Making a new expression matrix of only genes that are both in tissue-specific files & the reference gmt files
correlation_matrix[correlation_matrix > 0.99] = NA # remove self-self interaction
mean_matrix = matrix(0, nrow(correlation_matrix), length(genelists))
rownames(mean_matrix) = rownames(correlation_matrix)
colnames(mean_matrix) = names(genelists)
#STEP III. Very important-fast/efficient step for R,taking a subset of genes based on gene set & avging the corr all at once
for(p in names(genelists)){
mean_matrix[, p] = rowMeans(correlation_matrix[,genelists[[p]]], na.rm=T)
}
mean_matrix[1:5,1:5]
correlation_dataframe[1:5,1:5]
correlation_matrix[1:5,1:5]
correlation_matrix <- as.matrix(correlation_dataframe)
correlation_matrix[1:5,1:5]
# Set NA
genes = rownames(correlation_matrix)      #expt=expression matrix, cor.score
#####
# Read GMT
gmt = readLines('libraries.dir/ARCHS4_Kinases_Coexp.txt')
genelists = list()                        #each element in list-> gene
for(ll in gmt){
sp = unlist(strsplit(ll, "\t"))         #split strings of each line (into tabbed words)
genesetname = sp[1]                     #1st string is the current geneset's name
v = c()                                 #create an empty vector v, ends up being all of the genes in this gene set
for(i in 3:length(sp)){                 #actual gene symbol starts at 3rd string(name of set, empty space for description, 1st gene)
sp1 = unlist(strsplit(sp[i], ","))    #can read commas in a geneset names
v = c(v, sp1[1])                      #dismiss other numbers only save gene symbols to v
}
ig = intersect(genes, v)                #unique genes of ref gmt & tissue corr expression matrix
if(length(ig) > 1){                     #need at least 2 genes @ each geneset
genelists[[length(genelists)+1]] = ig #holds phenotypes & genes in list format, each set is a vector of its genes
names(genelists)[length(genelists)] = gsub("_$", "", genesetname) #throwout underscore in genesets
}
}
sgenes = rev(sort(table(unlist(genelists))))
sgenes = names(sgenes)[sgenes > 4]
reversegmt = list()
for(i in 1:length(genelists)){
lname = names(genelists)[i]
for(gene in genelists[[i]]){
reversegmt[[gene]] = c(reversegmt[[gene]], lname)
}
}
#####
#STEP II. Making a new expression matrix of only genes that are both in tissue-specific files & the reference gmt files
correlation_matrix[correlation_matrix > 0.99] = NA # remove self-self interaction
mean_matrix = matrix(0, nrow(correlation_matrix), length(genelists))
rownames(mean_matrix) = rownames(correlation_matrix)
colnames(mean_matrix) = names(genelists)
#STEP III. Very important-fast/efficient step for R,taking a subset of genes based on gene set & avging the corr all at once
for(p in names(genelists)){
mean_matrix[, p] = rowMeans(correlation_matrix[,genelists[[p]]], na.rm=T)
}
mean_matrix[1:5,1:5]
correlation_matrix[1:5,1:5]
correlation_matrix <- as.numeric(as.matrix(correlation_dataframe))
correlation_matrix[1:5,1:5]
correlation_dataframe[1:5,1:5]
correlation_matrix <- as.matrix(correlation_dataframe)
correlation_matrix[1:5,1:5]
correlation_matrix <- data.matrix(correlation_dataframe)
correlation_matrix[1:5,1:5]
cordf <- correlation_dataframe.iloc[1:5,1:5]
cordf <- correlation_dataframe[1:5,1:5]
correlation_matrix <- data.matrix(cordf)
correlation_matrix[1:5,1:5]
correlation_matrix <- as.numeric(as.character(as.matrix(cordf)))
correlation_matrix[1:5,1:5]
correlation_matrix#[1:5,1:5]
cordf
sapply(cordf, as.numeric)
sapply(cordf, function(x){as.numeric(as.character(x))})
df <- sapply(cordf, function(x){as.numeric(as.character(x))})
rownames(df) <- colnames(df)
as.matrix(df)
correlation_matrix <- sapply(correlation_dataframe, function(x){as.numeric(as.character(x))})
rownames(correlation_matrix) <- colnames(correlation_matrix)
correlation_matrix <- as.matrix(correlation_matrix)
correlation_matrix[1:5,1:5]
correlation_matrix[correlation_matrix > 0.99] = NA # remove self-self interaction
mean_matrix = matrix(0, nrow(correlation_matrix), length(genelists))
rownames(mean_matrix) = rownames(correlation_matrix)
colnames(mean_matrix) = names(genelists)
#STEP III. Very important-fast/efficient step for R,taking a subset of genes based on gene set & avging the corr all at once
for(p in names(genelists)){
mean_matrix[, p] = rowMeans(correlation_matrix[,genelists[[p]]], na.rm=T)
}
mean_matrix[1:5,1:5]
